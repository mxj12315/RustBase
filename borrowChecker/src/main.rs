/*
 * 第一条规则是编译器为每一个引用参数都分配一个生命周期参数
 * 第二条规则是如果只有一个输入生命周期参数，那么它被赋予所有输出生命周期参数
 * 第三条规则是如果方法有多个输入生命周期参数并且其中一个参数是 &self 或 &mut self，
 * 说明是个对象的方法 (method)(译者注：这里涉及 rust 的面向对象)，那么所有输出生命周期参数被赋予 self 的生命周期
 */

fn main() {
    let r;          // ---------+-- 'a
                          //          |
    {                     //          |
        let x = 5;   // -+-- 'b  | 
        r = &x;           //  |       |
    }                     // -+       |
                          //          |
    println!("r: {}", r); //          |
}                         // ---------+

/*  x的生命周期是 ‘b  
 *  r的生命周期是 ’a
 *  r的生命周期>x生命周期，第六行中r指向了x的生命周期
 *  也就是说 r变量指向的内存生命周期比本身小，系统判断引用的生命周期
 *  后编译器会编译报错
 *  生命周期的条件：
 *     变量的生命周期应该改 小于等于 所指向的内存的生命周期 
*/ 